# ðŸ‘¥ Simple Single-Stage Dockerfile for User Service
# Based on the working auth service pattern

FROM node:18-alpine

# Set environment variables
ENV NODE_ENV=production \
    NPM_CONFIG_LOGLEVEL=warn \
    NODE_OPTIONS="--max-old-space-size=512" \
    PORT=3002

# Install system dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    ca-certificates \
    python3 \
    make \
    g++ && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S userservice -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies (including dev dependencies for build)
RUN npm install --legacy-peer-deps

# Install TypeScript globally for build
RUN npm install -g typescript

# Copy source code
COPY src/ ./src/

# Create necessary directory structure and mock files
RUN mkdir -p node_modules/@sap && \
    echo 'module.exports = { info: console.log, error: console.error, warn: console.warn, debug: console.log };' > node_modules/@sap/logger.js && \
    mkdir -p node_modules/@corp-astro && \
    echo 'module.exports = { UserRole: {}, Permission: {}, ApiResponse: {}, PaginatedResponse: {} };' > node_modules/@corp-astro/shared-types.js

# Build the application
RUN npm run build

# Change ownership to non-root user
RUN chown -R userservice:nodejs /app
USER userservice

# Expose port
EXPOSE 3002

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the service
CMD ["dumb-init", "node", "dist/index.js"]
