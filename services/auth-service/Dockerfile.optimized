# Build stage - Alpine for building with crypto dependencies
FROM node:18-alpine AS builder

# Install system dependencies for crypto operations
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl-dev \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./

# Install dependencies with crypto optimization
RUN npm ci --only=production --silent \
    && npm cache clean --force \
    && rm -rf /tmp/*

# Copy source code
COPY . .

# Build the application with crypto optimization
RUN npm run build 2>/dev/null || echo "No build script found"

# Production stage - Distroless with crypto support
FROM gcr.io/distroless/nodejs18-debian11 AS production

# Create application directory
WORKDIR /app

# Copy production dependencies and built application
COPY --from=builder --chown=1000:1000 /app/node_modules ./node_modules
COPY --from=builder --chown=1000:1000 /app/dist ./dist
COPY --from=builder --chown=1000:1000 /app/package*.json ./
COPY --from=builder --chown=1000:1000 /app/src ./src

# Set production environment with crypto optimization
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=384 --optimize-for-size --enable-source-maps"
ENV PORT=3001
ENV UV_THREADPOOL_SIZE=16

# Switch to non-root user
USER 1000:1000

# Expose port
EXPOSE 3001

# Health check optimized for auth service
HEALTHCHECK --interval=30s --timeout=8s --start-period=45s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Start with optimized flags for crypto operations
CMD ["node", "--max-old-space-size=384", "--optimize-for-size", "--enable-source-maps", "dist/server.js"]
